package bot

import (
	"Unbewohnte/ACASbot/internal/domain"
	"Unbewohnte/ACASbot/internal/similarity"
	"Unbewohnte/ACASbot/internal/spreadsheet"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/tealeg/xlsx"
)

type Command struct {
	Name        string
	Description string
	Example     string
	Group       string
	Call        func(string) (string, error)
}

func (bot *Bot) NewCommand(cmd Command) {
	bot.commands = append(bot.commands, cmd)
}

func (bot *Bot) CommandByName(name string) *Command {
	for i := range bot.commands {
		if bot.commands[i].Name == name {
			return &bot.commands[i]
		}
	}

	return nil
}

func constructCommandHelpMessage(command Command) string {
	commandHelp := ""
	commandHelp += fmt.Sprintf("\n*–ö–æ–º–∞–Ω–¥–∞:* \"%s\"\n*–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n", command.Name, command.Description)
	if command.Example != "" {
		commandHelp += fmt.Sprintf("*–ü—Ä–∏–º–µ—Ä:* `%s`\n", command.Example)
	}

	return commandHelp
}

func (bot *Bot) Help(args string) (string, error) {
	if strings.TrimSpace(args) != "" {
		// –û—Ç–≤–µ—Ç–∏—Ç—å –ª–∏—à—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
		command := bot.CommandByName(args)
		if command != nil {
			return constructCommandHelpMessage(*command), nil
		}
	}

	var helpMessage string

	commandsByGroup := make(map[string][]Command)
	for _, command := range bot.commands {
		commandsByGroup[command.Group] = append(commandsByGroup[command.Group], command)
	}

	groups := []string{}
	for g := range commandsByGroup {
		groups = append(groups, g)
	}
	sort.Strings(groups)

	for _, group := range groups {
		helpMessage += fmt.Sprintf("\n\n*[%s]*\n", group)
		for _, command := range commandsByGroup[group] {
			helpMessage += constructCommandHelpMessage(command)
		}
	}

	return helpMessage, nil
}

func (bot *Bot) ChangeObj(args string) (string, error) {
	if args == "" {
		return "", errors.New("–∏–º—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
	}

	bot.conf.Analysis.Object = args

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()

	return fmt.Sprintf("–û–±—ä–µ–∫—Ç —Å–º–µ–Ω–µ–Ω –Ω–∞ \"%s\"", bot.conf.Analysis.Object), nil
}

func (bot *Bot) formatAnalysisResult(art *domain.Article) string {
	var response strings.Builder

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	response.WriteString(fmt.Sprintf("*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n\n", art.Title))

	// –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
	if art.PublishedAt != 0 {
		pubDate := time.Unix(art.PublishedAt, 0)
		response.WriteString(
			fmt.Sprintf("*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* %s\n\n",
				fmt.Sprintf("%d/%d/%d",
					pubDate.Day(),
					pubDate.Month(),
					pubDate.Year(),
				),
			),
		)
	}

	response.WriteString(fmt.Sprintf("*–°–≤—è–∑—å —Å \"%s\":* %s\n\n", bot.conf.Analysis.Object, art.Affiliation))

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ
	if art.Sentiment != "" {
		response.WriteString(fmt.Sprintf("*–û—Ç–Ω–æ—à–µ–Ω–∏–µ:* %s\n", art.Sentiment))
		if art.Justification != "" {
			response.WriteString(fmt.Sprintf("*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:* %s\n", art.Justification))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if len(art.Errors) > 0 {
		response.WriteString("\n‚ö†Ô∏è *–û—à–∏–±–∫–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:*\n")
		for _, err := range art.Errors {
			response.WriteString(fmt.Sprintf("- %s\n", err.Error()))
		}
	}

	return response.String()
}

func (bot *Bot) Do(args string) (string, error) {
	if args == "" {
		return "", errors.New("–≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ URL")
	}

	if !strings.HasPrefix(args, "http") {
		return "", errors.New("–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http/https")
	}

	url := args

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
	art, err := bot.analyzeArticle(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %w", err)
	}
	if art.PublishedAt == 0 {
		now := time.Now()
		art.PublishedAt = now.Unix()
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
	if existingArticle, err := bot.conf.GetDB().GetExactDuplicate(art.Content); err == nil && existingArticle != nil {
		return bot.notifyExactDuplicate(existingArticle), nil
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
	embedding, err := bot.model.GetEmbedding(art.Content)
	if err != nil {
		return "", errors.New("–æ—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
	}

	// –ü–æ–∏—Å–∫ —Å—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π
	similar, err := bot.conf.GetDB().FindSimilar(
		embedding,
		bot.conf.Analysis.VectorSimilarityThreshold,
		uint(bot.conf.Analysis.DaysLookback),
	)
	if err != nil {
		return "", errors.New("–æ—à–∏–±–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π")
	}

	var verified []domain.Article
	if len(similar) > 0 {
		composite := similarity.NewCompositeSimilarity(bot.conf.Analysis.CompositeVectorWeight)
		for _, candidate := range similar {
			score, err := composite.Compare(
				art.Content,
				candidate.Content,
				embedding,
				candidate.Embedding,
			)
			if err == nil && score >= bot.conf.Analysis.FinalSimilarityThreshold {
				candidate.TrueSimilarity = score
				verified = append(verified, candidate)

				// –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç—å—é –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é
				if err := bot.conf.GetDB().AddSimilarURL(candidate.ID, url); err != nil {
					log.Printf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é: %v", err)
				}

				// –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
				if err := bot.conf.GetDB().IncrementCitation(candidate.ID); err != nil {
					log.Printf("–æ—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π: %v", err)
				}
			}
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
	art.Original = len(verified) == 0

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É
	if len(verified) == 0 || bot.conf.Analysis.SaveSimilarArticles {
		if err := bot.saveNewArticle(art, embedding, url); err != nil {
			return "", errors.New("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
		}
	}

	duplicatesText := bot.generateDuplicatesMessage(verified, *art)

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	responseText := bot.formatAnalysisResult(art)
	fullMessage := "üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞*\n" + responseText
	if duplicatesText != "" {
		fullMessage += "\n\n" + duplicatesText
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Sheets
	if bot.conf.Sheets.PushToGoogleSheet {
		if err := bot.sheet.AddAnalysisResultWithRetry(art, 3); err != nil {
			log.Printf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Sheet: %v", err)
			fullMessage += "\n\n‚ùå –æ—à–∏–±–∫–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–Ω–ª–∞–π–Ω —Ç–∞–±–ª–∏—Ü—É: " + err.Error()
		} else {
			fullMessage += "\n\nüíæ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–Ω–ª–∞–π–Ω —Ç–∞–±–ª–∏—Ü—É!"
		}
	}

	return fullMessage, nil
}

func (bot *Bot) About(args string) (string, error) {
	return `ACAS bot (Article Context And Sentiment bot).

–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–µ–π –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±—ä–µ–∫—Ç–∞/–ª–∏—á–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ Google —Ç–∞–±–ª–∏—Ü—É, –ª–æ–∫–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.

Source: https://github.com/Unbewohnte/ACASbot
–õ–∏—Ü–µ–Ω–∑–∏—è: GPLv3
`, nil
}

func (bot *Bot) AddUser(args string) (string, error) {
	if args == "" {
		return "", errors.New("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω")
	}

	id, err := strconv.ParseInt(args, 10, 64)
	if err != nil {
		return "", errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	for _, allowedID := range bot.conf.Telegram.AllowedUserIDs {
		if id == allowedID {
			return "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.", nil
		}
	}

	bot.conf.Telegram.AllowedUserIDs = append(bot.conf.Telegram.AllowedUserIDs, id)

	// –°–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ñ–∞–π–ª
	bot.conf.Update()

	return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", nil
}

func (bot *Bot) TogglePublicity(args string) (string, error) {
	if bot.conf.Telegram.Public {
		bot.conf.Telegram.Public = false
		bot.conf.Update()
		return "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.", nil
	} else {
		bot.conf.Telegram.Public = true
		bot.conf.Update()
		return "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ç–µ–ø–µ—Ä—å —É –≤—Å–µ—Ö.", nil
	}
}
func (bot *Bot) RemoveUser(args string) (string, error) {
	if args == "" {
		return "", errors.New("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω")
	}

	id, err := strconv.ParseInt(args, 10, 64)
	if err != nil {
		return "", errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	found := false
	newAllowedUserIDs := []int64{}
	for _, allowedID := range bot.conf.Telegram.AllowedUserIDs {
		if allowedID == id {
			found = true
			continue
		}
		newAllowedUserIDs = append(newAllowedUserIDs, allowedID)
	}

	if !found {
		return "", errors.New("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
	}

	bot.conf.Telegram.AllowedUserIDs = newAllowedUserIDs
	bot.conf.Update()

	return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", nil
}

func (bot *Bot) ChangeMaxContentSize(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	}

	newMaxContentSize, err := strconv.ParseUint(args, 10, 64)
	if err != nil {
		return "", errors.New("—É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	}

	if newMaxContentSize <= 0 {
		return "", errors.New("—É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ > 0")
	}

	bot.conf.Analysis.MaxContentSize = uint(newMaxContentSize)
	bot.conf.Update()

	return "–ó–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ " +
		strconv.FormatUint(newMaxContentSize, 10) + " —Å–∏–º–≤–æ–ª–æ–≤.", nil
}

func (bot *Bot) PrintConfig(args string) (string, error) {
	var response strings.Builder

	response.WriteString("*–ù—ã–Ω–µ—à–Ω—è—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è*: \n")
	response.WriteString("\n*[–ê–ù–ê–õ–ò–ó]*\n")
	response.WriteString(fmt.Sprintf("*–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –Ω–∞*: `%v` –¥–Ω–µ–π\n", bot.conf.Analysis.DaysLookback))
	response.WriteString(fmt.Sprintf("*–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*: `%v`\n", bot.conf.Analysis.MaxContentSize))
	response.WriteString(fmt.Sprintf("*–ü–æ—Ä–æ–≥ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞*: `%v` (%v%%)\n",
		bot.conf.Analysis.VectorSimilarityThreshold,
		bot.conf.Analysis.VectorSimilarityThreshold*100.0))
	response.WriteString(fmt.Sprintf("*–í–µ—Å–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞*: `%.2f` (–í–µ–∫—Ç–æ—Ä–Ω—ã–π: %.2f%%; –¢–µ–∫—Å—Ç–æ–≤—ã–π: %.2f%%)\n",
		bot.conf.Analysis.CompositeVectorWeight,
		bot.conf.Analysis.CompositeVectorWeight*100.0,
		(1.0-bot.conf.Analysis.CompositeVectorWeight)*100.0))
	response.WriteString(fmt.Sprintf("*–ö–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞*: `%v` (%v%%)\n",
		bot.conf.Analysis.FinalSimilarityThreshold,
		bot.conf.Analysis.FinalSimilarityThreshold*100.0))
	response.WriteString(fmt.Sprintf("*–û–±—ä–µ–∫—Ç*: `%v`\n", bot.conf.Analysis.Object))
	response.WriteString(fmt.Sprintf("*–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞*: `%v`\n", bot.conf.Analysis.ObjectMetadata))
	response.WriteString(fmt.Sprintf("*–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏*: `%v`\n", bot.conf.Analysis.SaveSimilarArticles))

	response.WriteString("\n*[–û–ë–©–ï–ï]*:\n")
	response.WriteString(fmt.Sprintf("*–û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π?*: `%v`\n", bot.conf.Telegram.Public))
	response.WriteString(fmt.Sprintf("*–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: `%+v`\n", bot.conf.Telegram.AllowedUserIDs))

	response.WriteString("\n*[LLM]*:\n")
	response.WriteString(fmt.Sprintf("*LLM*: `%v`\n", bot.conf.Ollama.GeneralModel))
	response.WriteString(fmt.Sprintf("*–≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤–∞—è LLM*: `%v`\n", bot.conf.Ollama.EmbeddingModel))
	response.WriteString(fmt.Sprintf("*–í—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ –æ—Ç–≤–µ—Ç LLM*: `%v` —Å–µ–∫—É–Ω–¥\n", bot.conf.Ollama.QueryTimeoutSeconds))
	response.WriteString(fmt.Sprintf("*–ü—Ä–æ–º–ø—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞*: `%v`\n", bot.conf.Ollama.Prompts.Title))
	response.WriteString(fmt.Sprintf("*–ü—Ä–æ–º–ø—Ç —Å–≤—è–∑–∏ —Å –æ–±—ä–µ–∫—Ç–æ–º*: `%v`\n", bot.conf.Ollama.Prompts.Affiliation))
	response.WriteString(fmt.Sprintf("*–ü—Ä–æ–º–ø—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –æ–±—ä–µ–∫—Ç—É*: `%v`\n", bot.conf.Ollama.Prompts.Sentiment))

	response.WriteString("\n*[–¢–ê–ë–õ–ò–¶–´]*:\n")
	response.WriteString(fmt.Sprintf("*–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—É?*: `%v`\n", bot.conf.Sheets.PushToGoogleSheet))
	response.WriteString(fmt.Sprintf("*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã*: `%v`\n", bot.conf.Sheets.Google.Config.SheetName))
	response.WriteString(fmt.Sprintf("*ID Google —Ç–∞–±–ª–∏—Ü—ã*: `%v`\n", bot.conf.Sheets.Google.Config.SpreadsheetID))

	return response.String(), nil
}

func (bot *Bot) ChangeSpreadsheetID(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	}

	bot.conf.Sheets.Google.Config.SpreadsheetID = args
	if bot.sheet != nil {
		bot.sheet.SpreadsheetID = bot.conf.Sheets.Google.Config.SpreadsheetID
	}

	bot.conf.Update()

	return "ID Google —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: " + args, nil
}

func (bot *Bot) ChangeSheetName(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è")
	}

	bot.conf.Sheets.Google.Config.SheetName = args
	if bot.sheet != nil {
		bot.sheet.SheetName = bot.conf.Sheets.Google.Config.SheetName
	}

	bot.conf.Update()

	return "–ò–º—è –ª–∏—Å—Ç–∞ Google —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: " + args, nil
}

func (bot *Bot) ChangeQueryTimeout(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥")
	}

	timeoutSeconds, err := strconv.ParseUint(args, 10, 64)
	if err != nil {
		return "", errors.New("–Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥")
	}

	bot.conf.Ollama.QueryTimeoutSeconds = uint(timeoutSeconds)
	bot.model.TimeoutSeconds = bot.conf.Ollama.QueryTimeoutSeconds

	bot.conf.Update()

	return fmt.Sprintf("–í—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ %d —Å–µ–∫—É–Ω–¥", timeoutSeconds), nil
}
func (bot *Bot) GeneralQuery(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å")
	}

	answer, err := bot.model.Query(args)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å: %w", err)
	}

	return answer, nil
}
func (bot *Bot) SetObjectData(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ")
	}

	bot.conf.Analysis.ObjectMetadata = strings.TrimSpace(args)
	bot.conf.Update()

	return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", nil
}

type promptType string

const (
	PROMPT_AFFILIATION promptType = "affiliation"
	PROMPT_TITLE       promptType = "title"
	PROMPT_SENTIMENT   promptType = "sentiment"
)

func (bot *Bot) setPrompt(args string, promptType promptType) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
	}

	switch promptType {
	case PROMPT_TITLE:
		bot.conf.Ollama.Prompts.Title = args
	case PROMPT_AFFILIATION:
		bot.conf.Ollama.Prompts.Affiliation = args
	case PROMPT_SENTIMENT:
		bot.conf.Ollama.Prompts.Sentiment = args
	default:
		return "", errors.New("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞")
	}

	bot.conf.Update()

	return "–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω", nil
}

func (bot *Bot) SetAffiliationPrompt(args string) (string, error) {
	return bot.setPrompt(args, PROMPT_AFFILIATION)
}

func (bot *Bot) SetTitlePrompt(args string) (string, error) {
	return bot.setPrompt(args, PROMPT_TITLE)
}

func (bot *Bot) SetSentimentPrompt(args string) (string, error) {
	return bot.setPrompt(args, PROMPT_SENTIMENT)
}
func (bot *Bot) ListModels(args string) (string, error) {
	models, err := bot.model.ListModels()
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: %w", err)
	}

	response := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"
	for _, model := range models {
		response += fmt.Sprintf("`%s` (%s, %s)\n",
			model.Name,
			model.Details.ParameterSize,
			model.Details.QuantizationLevel,
		)
	}
	response += fmt.Sprintf("\n–¢–µ–∫—É—â–∞—è:\n `%s`\n", bot.model.ModelName)

	return response, nil
}
func (bot *Bot) SetModel(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏")
	}

	newModel := strings.TrimSpace(args)
	availableModels, err := bot.model.ListModels()
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: %w", err)
	}

	for _, availableModel := range availableModels {
		if availableModel.Name == newModel {
			bot.model.ModelName = newModel
			bot.conf.Ollama.GeneralModel = newModel
			bot.conf.Update()
			return fmt.Sprintf("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ \"%s\"", bot.model.ModelName), nil
		}
	}

	return fmt.Sprintf("–¢–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ \"%s\"", bot.model.ModelName), nil
}

func (bot *Bot) ToggleSaveSimilar(args string) (string, error) {
	if bot.conf.Analysis.SaveSimilarArticles {
		bot.conf.Analysis.SaveSimilarArticles = false
		bot.conf.Update()
		return "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ.", nil
	} else {
		bot.conf.Analysis.SaveSimilarArticles = true
		bot.conf.Update()
		return "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.", nil
	}
}

func (bot *Bot) ChangeVectorSimilarityThreshold(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	}

	newThreshold, err := strconv.ParseFloat(args, 64)
	if err != nil || newThreshold < 0 || newThreshold > 1.0 {
		return "", errors.New("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0")
	}

	bot.conf.Analysis.VectorSimilarityThreshold = newThreshold
	bot.conf.Update()

	return fmt.Sprintf("–ü–æ—Ä–æ–≥ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %.2f (%.0f%%)",
		newThreshold, newThreshold*100.0), nil
}
func (bot *Bot) ChangeDaysLookback(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω–µ–π")
	}

	newDaysLookback, err := strconv.ParseUint(args, 10, 64)
	if err != nil {
		return "", errors.New("—É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	}

	if newDaysLookback <= 0 {
		return "", errors.New("—É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω–µ–π > 0")
	}

	bot.conf.Analysis.DaysLookback = uint(newDaysLookback)
	bot.conf.Update()

	return fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–Ω–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ %d –¥–Ω–µ–π", newDaysLookback), nil
}

func (bot *Bot) ChangeFinalSimilarityThreshold(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	}

	newThreshold, err := strconv.ParseFloat(args, 64)
	if err != nil {
		return "", errors.New("—É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	}

	if newThreshold < 0 || newThreshold > 1.0 {
		return "", errors.New("—É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 0.0 < –∑–Ω–∞—á–µ–Ω–∏–µ < 1.0")
	}

	oldThreshold := bot.conf.Analysis.FinalSimilarityThreshold
	bot.conf.Analysis.FinalSimilarityThreshold = newThreshold
	bot.conf.Update()

	return fmt.Sprintf("–ö–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å %.2f –Ω–∞ %.2f (%.0f%%)",
		oldThreshold, newThreshold, newThreshold*100.0), nil
}

func (bot *Bot) ChangeCompositeWeights(args string) (string, error) {
	if args == "" {
		return "", errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	}

	newWeight, err := strconv.ParseFloat(args, 64)
	if err != nil || newWeight < 0 || newWeight > 1.0 {
		return "", errors.New("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0")
	}

	bot.conf.Analysis.CompositeVectorWeight = newWeight
	bot.conf.Update()

	return fmt.Sprintf("–í–µ—Å–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã: %.2f (–í–µ–∫—Ç–æ—Ä–Ω—ã–π: %.0f%%, –¢–µ–∫—Å—Ç–æ–≤—ã–π: %.0f%%)",
		newWeight, newWeight*100.0, (1.0-newWeight)*100.0), nil
}

func (bot *Bot) ForgetArticles(args string) (string, error) {
	err := bot.conf.GetDB().DeleteAllArticles()
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å–∏: %w", err)
	}

	return "–í—Å–µ —Å—Ç–∞—Ç—å–∏ —É—Å–ø–µ—à–Ω–æ \"–∑–∞–±—ã—Ç—ã\"", nil
}

func (bot *Bot) GenerateSpreadsheet(args string) (string, error) {
	articles, err := bot.conf.GetDB().GetAllArticles()
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –≤ –ø–∞–º—è—Ç–∏
	fileBuffer, err := spreadsheet.GenerateFromDatabase(articles)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
	fileName := "ACASbot_Results.xlsx"
	file, err := os.Create(fileName)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %w", err)
	}
	defer file.Close()
	_, err = file.Write(fileBuffer.Bytes())
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %w", err)
	}

	return fmt.Sprintf("–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ %s", fileName), nil
}

func (bot *Bot) SaveLocalSpreadsheet(args string) (string, error) {
	articles, err := bot.conf.GetDB().GetAllArticles()
	if err != nil {
		return "", err
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –≤ –ø–∞–º—è—Ç–∏
	fileBuffer, err := spreadsheet.GenerateFromDatabase(articles)
	if err != nil {
		return "", err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
	fileName := "ACASbot_Results.xlsx"
	file, err := os.Create(fileName)
	if err != nil {
		return "", err
	}
	defer file.Close()
	_, err = file.Write(fileBuffer.Bytes())
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("–õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ %s", fileName), nil
}

func (bot *Bot) FindSimilar(args string) (string, error) {
	parts := strings.Fields(args)
	if len(parts) == 0 {
		return "", errors.New("–≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ URL")
	}

	url := parts[0]
	if !strings.HasPrefix(url, "http") {
		return "", errors.New("–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http/https")
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏
	art, err := bot.getArticle(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
	embedding, err := bot.model.GetEmbedding(art.Content)
	if err != nil {
		return "", errors.New("–æ—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
	}

	// –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏
	similar, err := bot.conf.GetDB().FindSimilar(
		embedding,
		bot.conf.Analysis.VectorSimilarityThreshold,
		uint(bot.conf.Analysis.DaysLookback),
	)
	if err != nil {
		return "", errors.New("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if len(similar) == 0 {
		return "‚úÖ –ü–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", nil
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
	if existing, err := bot.conf.GetDB().GetExactDuplicate(art.Content); err == nil && existing != nil {
		return fmt.Sprintf("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç: %s\nURL: %s", existing.Title, existing.SourceURL), nil
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
	composite := similarity.NewCompositeSimilarity(bot.conf.Analysis.CompositeVectorWeight)
	var verified []domain.Article
	for _, candidate := range similar {
		score, err := composite.Compare(
			art.Content,
			candidate.Content,
			embedding,
			candidate.Embedding,
		)
		if err == nil && score >= bot.conf.Analysis.FinalSimilarityThreshold {
			candidate.TrueSimilarity = score
			verified = append(verified, candidate)
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
	if len(verified) == 0 {
		return "‚úÖ –ü–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞)", nil
	}

	var result strings.Builder
	result.WriteString(fmt.Sprintf("üîç –ù–∞–π–¥–µ–Ω–æ %d –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π:\n\n", len(verified)))

	for i, article := range verified {
		result.WriteString(fmt.Sprintf("%d. *%s*\n", i+1, article.Title))
		result.WriteString(fmt.Sprintf("   üîó [–ò—Å—Ç–æ—á–Ω–∏–∫](%s)\n", article.SourceURL))
		result.WriteString(fmt.Sprintf("   üí° –°—Ö–æ–¥—Å—Ç–≤–æ: %.2f%%\n\n", article.TrueSimilarity*100))
	}

	return result.String(), nil
}

func ParseExcelDate(cellValue string) (time.Time, error) {
	// –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	cellValue = strings.TrimSpace(cellValue)

	// 1. –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ Excel serial number
	if serial, err := strconv.Atoi(cellValue); err == nil {
		// Excel date epoch is 1899-12-30 (note: not 31)
		baseDate := time.Date(1899, 12, 30, 0, 0, 0, 0, time.UTC)
		return baseDate.AddDate(0, 0, serial), nil
	}

	// 2. –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–º –≥–æ–¥–æ–º
	formats := []string{
		"02.01.2006", // dd.mm.yyyy
		"02/01/2006", // dd/mm/yyyy
		"2006-01-02", // yyyy-mm-dd
		"01-02-2006", // mm-dd-yyyy (US format)
		"01.02.2006", // mm.dd.yyyy
		"02-01-2006", // dd-mm-yyyy
	}

	for _, format := range formats {
		if t, err := time.Parse(format, cellValue); err == nil {
			return t, nil
		}
	}

	// 3. –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã–º –≥–æ–¥–æ–º (–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥)
	twoDigitYearFormats := []string{
		"02.01.06", // dd.mm.yy
		"02/01/06", // dd/mm/yy
		"01-02-06", // mm-dd-yy
		"01.02.06", // mm.dd.yy
		"02-01-06", // dd-mm-yy
	}

	for _, format := range twoDigitYearFormats {
		if t, err := time.Parse(format, cellValue); err == nil {
			// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 00-79 -> 2000-2079, 80-99 -> 1980-1999)
			year := t.Year()
			if year >= 100 { // –ï—Å–ª–∏ year —É–∂–µ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞—Ö)
				return t, nil
			}
			if year >= 80 {
				t = t.AddDate(1900, 0, 0)
			} else {
				t = t.AddDate(2000, 0, 0)
			}
			return t, nil
		}
	}

	// 4. –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–∏–ø–∞ "07-23-25"
	if parts := strings.Split(cellValue, "-"); len(parts) == 3 && len(parts[2]) == 2 {
		monthStr := parts[0]
		dayStr := parts[1]
		yearStr := parts[2]

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã–π –≥–æ–¥
		year, err := strconv.Atoi(yearStr)
		if err != nil {
			return time.Time{}, fmt.Errorf("invalid year: %s", yearStr)
		}

		// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥ (00-79 -> 2000-2079, 80-99 -> 1980-1999)
		if year >= 80 {
			year += 1900
		} else {
			year += 2000
		}

		// –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –ø–∞—Ä—Å–∏–º
		fullDate := fmt.Sprintf("%s-%s-%04d", monthStr, dayStr, year)
		return time.Parse("01-02-2006", fullDate)
	}

	return time.Time{}, fmt.Errorf("unrecognized date format: %s", cellValue)
}

func (bot *Bot) LoadXLSX(args string) (string, error) {
	// –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ args –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—É—Ç—å –∫ XLSX-—Ñ–∞–π–ª—É
	if args == "" {
		return "", errors.New("—É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ XLSX —Ñ–∞–π–ª—É")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	if !strings.HasSuffix(args, ".xlsx") {
		return "", errors.New("—Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .xlsx")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(args); os.IsNotExist(err) {
		return "", fmt.Errorf("—Ñ–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω", args)
	}

	// –ü–∞—Ä—Å–∏–º XLSX
	xlFile, err := xlsx.OpenFile(args)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è XLSX —Ñ–∞–π–ª–∞: %w", err)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	successCount := 0
	skipCount := 0
	db := bot.conf.GetDB()

	for _, sheet := range xlFile.Sheets {
		for i, row := range sheet.Rows {
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
			if i == 0 || len(row.Cells) == 0 {
				continue
			}

			// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
			cells := row.Cells
			if len(cells) < 6 {
				skipCount++
				continue
			}

			title := strings.TrimSpace(cells[2].String())
			sourceURL := strings.TrimSpace(cells[3].String())
			if title == "" || sourceURL == "" {
				skipCount++
				continue
			}

			// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
			pubDate, err := ParseExcelDate(cells[0].String())
			if err != nil {
				log.Printf("Failed to parse date: %s", err)
				pubDate = time.Now()
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
			art := &domain.Article{
				PublishedAt: pubDate.Unix(),
				Affiliation: cells[4].String(),
				Sentiment:   cells[5].String(),
				Title:       cells[2].String(),
				SourceURL:   cells[3].String(),
				CreatedAt:   time.Now().Unix(),
				SimilarURLs: []string{},
				Embedding:   []float64{},
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ URL
			exists, err := db.HasArticleByURL(art.SourceURL)
			if err != nil || exists {
				skipCount++
				continue
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
			if err := db.SaveArticle(art); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É: %v", err)
				skipCount++
			} else {
				successCount++
			}
		}
	}

	return fmt.Sprintf(
		"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: %d —Å—Ç–∞—Ç–µ–π\nüö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã/–æ—à–∏–±–∫–∏): %d",
		successCount, skipCount,
	), nil
}

func (bot *Bot) SendLogs(args string) (string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–≥–æ–≤
	if _, err := os.Stat(bot.conf.LogsFile); os.IsNotExist(err) {
		return "", errors.New("—Ñ–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –ß–∏—Ç–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª
	logContent, err := os.ReadFile(bot.conf.LogsFile)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	if len(logContent) > 50*1024*1024 { // 50MB
		return "", errors.New("—Ñ–∞–π–ª –ª–æ–≥–æ–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)")
	}

	// –î–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤
	return string(logContent), nil
}

func (bot *Bot) SetXLSXColumns(args string) (string, error) {
	if args == "" {
		return "", errors.New("—É–∫–∞–∂–∏—Ç–µ JSON —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–æ–ª–æ–Ω–æ–∫")
	}

	var columns []domain.XLSXColumn
	if err := json.Unmarshal([]byte(args), &columns); err != nil {
		return "", errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π –∫–æ–Ω—Ñ–∏–≥
	bot.conf.Sheets.XLSXColumns = columns
	bot.conf.Update()

	return "–ö–æ–Ω—Ñ–∏–≥ –∫–æ–ª–æ–Ω–æ–∫ XLSX –æ–±–Ω–æ–≤–ª–µ–Ω", nil
}

func (bot *Bot) ShowXLSXColumns(args string) (string, error) {
	columnsJSON, err := json.MarshalIndent(bot.conf.Sheets.XLSXColumns, "", "  ")
	if err != nil {
		return "", errors.New("–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
	}

	return fmt.Sprintf("–¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ XLSX:\n```json\n%s\n```", string(columnsJSON)), nil
}

func (bot *Bot) TogglePushToGoogleSheets(args string) (string, error) {
	bot.conf.Sheets.PushToGoogleSheet = !bot.conf.Sheets.PushToGoogleSheet
	bot.conf.Update()

	if bot.conf.Sheets.PushToGoogleSheet {
		return "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É –≤–∫–ª—é—á–µ–Ω–æ.", nil
	} else {
		return "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∫–ª—é—á–µ–Ω–æ.", nil
	}
}
