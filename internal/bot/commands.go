package bot

import (
	"Unbewohnte/ACASbot/internal/article"
	"Unbewohnte/ACASbot/internal/similarity"
	"Unbewohnte/ACASbot/internal/spreadsheet"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/tealeg/xlsx"
)

type Command struct {
	Name        string
	Description string
	Example     string
	Group       string
	Call        func(*tgbotapi.Message)
}

func (bot *Bot) NewCommand(cmd Command) {
	bot.commands = append(bot.commands, cmd)
}

func (bot *Bot) CommandByName(name string) *Command {
	for i := range bot.commands {
		if bot.commands[i].Name == name {
			return &bot.commands[i]
		}
	}

	return nil
}

func constructCommandHelpMessage(command Command) string {
	commandHelp := ""
	commandHelp += fmt.Sprintf("\n*–ö–æ–º–∞–Ω–¥–∞:* \"%s\"\n*–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n", command.Name, command.Description)
	if command.Example != "" {
		commandHelp += fmt.Sprintf("*–ü—Ä–∏–º–µ—Ä:* `%s`\n", command.Example)
	}

	return commandHelp
}

func (bot *Bot) Help(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) >= 2 {
		// –û—Ç–≤–µ—Ç–∏—Ç—å –ª–∏—à—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
		command := bot.CommandByName(parts[1])
		if command != nil {
			helpMessage := constructCommandHelpMessage(*command)
			msg := tgbotapi.NewMessage(
				message.Chat.ID,
				helpMessage,
			)
			msg.ParseMode = "Markdown"
			bot.api.Send(msg)
			return
		}
	}

	var helpMessage string

	commandsByGroup := make(map[string][]Command)
	for _, command := range bot.commands {
		commandsByGroup[command.Group] = append(commandsByGroup[command.Group], command)
	}

	groups := []string{}
	for g := range commandsByGroup {
		groups = append(groups, g)
	}
	sort.Strings(groups)

	for _, group := range groups {
		helpMessage += fmt.Sprintf("\n\n*[%s]*\n", group)
		for _, command := range commandsByGroup[group] {
			helpMessage += constructCommandHelpMessage(command)
		}
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		helpMessage,
	)
	msg.ParseMode = "Markdown"
	bot.api.Send(msg)
}

func (bot *Bot) ChangeObj(message *tgbotapi.Message) {
	parts := strings.Split(strings.TrimSpace(message.Text), " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ò–º—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	bot.conf.Analysis.Object = strings.Join(parts[1:], " ")
	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		fmt.Sprintf("–û–±—ä–µ–∫—Ç —Å–º–µ–Ω–µ–Ω –Ω–∞ \"%s\"", bot.conf.Analysis.Object),
	)

	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) formatAnalysisResult(art *article.Article) string {
	var response strings.Builder

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	response.WriteString(fmt.Sprintf("*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n\n", art.Title))

	// –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
	if art.PublishedAt != 0 {
		pubDate := time.Unix(art.PublishedAt, 0)
		response.WriteString(
			fmt.Sprintf("*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* %s\n\n",
				fmt.Sprintf("%d/%d/%d",
					pubDate.Day(),
					pubDate.Month(),
					pubDate.Year(),
				),
			),
		)
	}

	response.WriteString(fmt.Sprintf("*–°–≤—è–∑—å —Å \"%s\":* %s\n\n", bot.conf.Analysis.Object, art.Affiliation))

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ
	if art.Sentiment != "" {
		response.WriteString(fmt.Sprintf("*–û—Ç–Ω–æ—à–µ–Ω–∏–µ:* %s\n", art.Sentiment))
		if art.Justification != "" {
			response.WriteString(fmt.Sprintf("*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:* %s\n", art.Justification))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if len(art.Errors) > 0 {
		response.WriteString("\n‚ö†Ô∏è *–û—à–∏–±–∫–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:*\n")
		for _, err := range art.Errors {
			response.WriteString(fmt.Sprintf("- %s\n", err.Error()))
		}
	}

	return response.String()
}
func (bot *Bot) Do(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ URL")
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}
	url := parts[1]
	if !strings.HasPrefix(url, "http") {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http/https")
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	processingMsg := tgbotapi.NewMessage(message.Chat.ID, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç—å—é...")
	processingMsg.ReplyToMessageID = message.MessageID
	sentMsg, _ := bot.api.Send(processingMsg)
	defer func() {
		deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, sentMsg.MessageID)
		bot.api.Send(deleteMsg)
	}()

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
	art, err := bot.analyzeArticle(url)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "+err.Error())
		errorMsg.ReplyToMessageID = message.MessageID
		bot.api.Send(errorMsg)
		return
	}
	if art.PublishedAt == 0 {
		now := time.Now()
		art.PublishedAt = now.Unix()
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç—å
	userConfig, err := bot.conf.GetDB().GetUserConfig(message.From.ID)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
	if existingArticle, err := bot.conf.GetDB().GetExactDuplicate(art.Content); err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤", message.MessageID)
		return
	} else if existingArticle != nil {
		bot.notifyExactDuplicate(message, existingArticle)
		return
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
	embedding, err := bot.model.GetEmbedding(art.Content)
	if err != nil {
		log.Printf("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å bot.model.GetEmbedding(art.Content): %s", err)
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", message.MessageID)
		return
	}

	// –ü–æ–∏—Å–∫ —Å—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π
	similar, err := bot.conf.GetDB().FindSimilar(
		embedding,
		userConfig.VectorSimilarityThreshold,
		userConfig.DaysLookback,
	)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π", message.MessageID)
		return
	}

	var verified []article.Article
	if len(similar) > 0 {
		composite := similarity.NewCompositeSimilarity(userConfig.CompositeVectorWeight)
		for _, candidate := range similar {
			score, err := composite.Compare(
				art.Content,
				candidate.Content,
				embedding,
				candidate.Embedding,
			)
			candidate.TrueSimilarity = score

			if err == nil && score >= userConfig.FinalSimilarityThreshold {
				bot.conf.GetDB().IncrementCitation(candidate.ID)
				candidate.Citations += 1
				verified = append(verified, candidate)
			}

			if bot.conf.Debug {
				log.Printf("–ö–∞–Ω–¥–∏–¥–∞—Ç: True: %.3f; Vector: %.3f", candidate.TrueSimilarity, candidate.Similarity)
			}
		}
	}

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
	if len(verified) > 0 {
		art.SimilarURLs = make([]string, 0, len(verified))
		for _, a := range verified {
			art.SimilarURLs = append(art.SimilarURLs, a.SourceURL)
		}
	}

	if len(verified) == 0 {
		// –£–Ω–∏–∫–∞–ª—å–Ω–∞—è
		if err := bot.saveNewArticle(art, embedding, url); err != nil {
			bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", message.MessageID)
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %s", err)
			return
		}
	} else if len(verified) > 0 && bot.conf.Analysis.SaveSimilarArticles {
		if err := bot.saveNewArticle(art, embedding, url); err != nil {
			bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", message.MessageID)
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %s", err)
			return
		}
		bot.sendSuccess(message.Chat.ID, "–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É", message.MessageID)
	} else {
		bot.sendSuccess(message.Chat.ID, "–°—Ç–∞—Ç—å—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", message.MessageID)
	}

	duplicatesText := bot.generateDuplicatesMessage(verified, *art)

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	responseText := bot.formatAnalysisResult(art)
	fullMessage := "üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞*\n" + responseText
	if duplicatesText != "" {
		fullMessage += "\n\n" + duplicatesText
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, fullMessage)
	msg.ParseMode = "Markdown"
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (Google Sheets, –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Ç.–¥.)
	if bot.conf.Debug {
		log.Println(msg.Text)
	}
	if bot.conf.Sheets.PushToGoogleSheet {
		if err := bot.sheet.AddAnalysisResultWithRetry(art, 3); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Sheet: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–Ω–ª–∞–π–Ω —Ç–∞–±–ª–∏—Ü—É: "+err.Error())
			bot.api.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(message.Chat.ID, "üíæ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–Ω–ª–∞–π–Ω —Ç–∞–±–ª–∏—Ü—É!")
			bot.api.Send(msg)
		}
	}
}

func (bot *Bot) About(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		`ACAS bot (Article Context And Sentiment bot).

–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–µ–π –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±—ä–µ–∫—Ç–∞/–ª–∏—á–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ Google —Ç–∞–±–ª–∏—Ü—É, –ª–æ–∫–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.

Source: https://github.com/Unbewohnte/ACASbot
–õ–∏—Ü–µ–Ω–∑–∏—è: GPLv3
`,
	)

	bot.api.Send(msg)
}

func (bot *Bot) AddUser(message *tgbotapi.Message) {
	parts := strings.Split(strings.TrimSpace(message.Text), " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	id, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	for _, allowedID := range bot.conf.Telegram.AllowedUserIDs {
		if id == allowedID {
			msg := tgbotapi.NewMessage(
				message.Chat.ID,
				"–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.",
			)
			msg.ReplyToMessageID = message.MessageID
			bot.api.Send(msg)
			return
		}
	}

	bot.conf.Telegram.AllowedUserIDs = append(bot.conf.Telegram.AllowedUserIDs, id)

	// –°–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ñ–∞–π–ª
	bot.conf.Update()

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) TogglePublicity(message *tgbotapi.Message) {
	if bot.conf.Telegram.Public {
		bot.conf.Telegram.Public = false
		bot.api.Send(
			tgbotapi.NewMessage(message.Chat.ID, "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö."),
		)
	} else {
		bot.conf.Telegram.Public = true
		bot.api.Send(
			tgbotapi.NewMessage(message.Chat.ID, "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ç–µ–ø–µ—Ä—å —É –≤—Å–µ—Ö."),
		)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) RemoveUser(message *tgbotapi.Message) {
	parts := strings.Split(strings.TrimSpace(message.Text), " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	id, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	tmp := bot.conf.Telegram.AllowedUserIDs
	bot.conf.Telegram.AllowedUserIDs = []int64{}
	for _, allowedID := range tmp {
		if allowedID == id {
			continue
		}

		bot.conf.Telegram.AllowedUserIDs = append(bot.conf.Telegram.AllowedUserIDs, allowedID)
	}

	// –°–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ñ–∞–π–ª
	bot.conf.Update()

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) ChangeMaxContentSize(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	newMaxContentSize, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	if newMaxContentSize <= 0 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ > 0",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	bot.conf.Analysis.MaxContentSize = uint(newMaxContentSize)

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) PrintConfig(message *tgbotapi.Message) {
	userConfig, err := bot.conf.GetDB().GetUserConfig(message.From.ID)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	var response string = ""

	response += "*–ù—ã–Ω–µ—à–Ω—è—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è*: \n"
	response += "\n*[–ê–ù–ê–õ–ò–ó]*\n"
	response += fmt.Sprintf("*–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –Ω–∞*: `%v` –¥–Ω–µ–π\n", userConfig.DaysLookback)
	response += fmt.Sprintf("*–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*: `%v`\n", bot.conf.Analysis.MaxContentSize)
	response += fmt.Sprintf("*–ü–æ—Ä–æ–≥ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞*: `%v` (%v%%)\n",
		userConfig.VectorSimilarityThreshold,
		userConfig.VectorSimilarityThreshold*100.0,
	)
	response += fmt.Sprintf("*–í–µ—Å–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞*: `%.2f` (–í–µ–∫—Ç–æ—Ä–Ω—ã–π: %.2f%%; –¢–µ–∫—Å—Ç–æ–≤—ã–π: %.2f%%)\n",
		userConfig.CompositeVectorWeight,
		userConfig.CompositeVectorWeight*100.0,
		(1.0-userConfig.CompositeVectorWeight)*100.0,
	)
	response += fmt.Sprintf("*–ö–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞*: `%v` (%v%%)\n",
		userConfig.FinalSimilarityThreshold,
		userConfig.FinalSimilarityThreshold*100.0,
	)
	response += fmt.Sprintf("*–û–±—ä–µ–∫—Ç*: `%v`\n", bot.conf.Analysis.Object)
	response += fmt.Sprintf("*–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞*: `%v`\n", bot.conf.Analysis.ObjectMetadata)
	response += fmt.Sprintf("*–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*: `%v`\n", bot.conf.Analysis.MaxContentSize)
	response += "\n*[–û–ë–©–ï–ï]*:\n"
	response += fmt.Sprintf("*–û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π?*: `%v`\n", bot.conf.Telegram.Public)
	response += fmt.Sprintf("*–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: `%+v`\n", bot.conf.Telegram.AllowedUserIDs)
	response += "\n*[LLM]*:\n"
	response += fmt.Sprintf("*LLM*: `%v`\n", bot.conf.Ollama.GeneralModel)
	response += fmt.Sprintf("*–≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤–∞—è LLM*: `%v`\n", bot.conf.Ollama.EmbeddingModel)
	response += fmt.Sprintf("*–í—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ –æ—Ç–≤–µ—Ç LLM*: `%v` —Å–µ–∫—É–Ω–¥\n", bot.conf.Ollama.QueryTimeoutSeconds)
	response += fmt.Sprintf("*–ü—Ä–æ–º–ø—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞*: `%v`\n", bot.conf.Ollama.Prompts.Title)
	response += fmt.Sprintf("*–ü—Ä–æ–º–ø—Ç —Å–≤—è–∑–∏ —Å –æ–±—ä–µ–∫—Ç–æ–º*: `%v`\n", bot.conf.Ollama.Prompts.Affiliation)
	response += fmt.Sprintf("*–ü—Ä–æ–º–ø—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –æ–±—ä–µ–∫—Ç—É*: `%v`\n", bot.conf.Ollama.Prompts.Sentiment)
	response += "\n*[–¢–ê–ë–õ–ò–¶–´]*:\n"
	response += fmt.Sprintf("*–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—É?*: `%v`\n", bot.conf.Sheets.PushToGoogleSheet)
	response += fmt.Sprintf("*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã*: `%v`\n", bot.conf.Sheets.Google.Config.SheetName)
	response += fmt.Sprintf("*ID Google —Ç–∞–±–ª–∏—Ü—ã*: `%v`\n", bot.conf.Sheets.Google.Config.SpreadsheetID)

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		response,
	)
	msg.ParseMode = "Markdown"
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) ChangeSpreadhseetID(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	bot.conf.Sheets.Google.Config.SpreadsheetID = parts[1]
	if bot.sheet != nil {
		bot.sheet.SpreadsheetID = bot.conf.Sheets.Google.Config.SpreadsheetID
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) ChangeSheetName(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	newName, _ := strings.CutPrefix(message.Text, parts[0])
	bot.conf.Sheets.Google.Config.SheetName = strings.TrimSpace(newName)
	if bot.sheet != nil {
		bot.sheet.SheetName = bot.conf.Sheets.Google.Config.SheetName
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) ChangeQueryTimeout(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	timeoutSeconds, err := strconv.ParseUint(parts[1], 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	bot.conf.Ollama.QueryTimeoutSeconds = uint(timeoutSeconds)
	bot.model.TimeoutSeconds = bot.conf.Ollama.QueryTimeoutSeconds

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–í—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) GeneralQuery(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	query := strings.Join(parts[1:], " ")
	answer, err := bot.model.Query(query)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		answer,
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	log.Printf("–û—Ç–≤–µ—Ç: %s", msg.Text)
}

func (bot *Bot) SetObjectData(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	objData, _ := strings.CutPrefix(message.Text, parts[0])

	bot.conf.Analysis.ObjectMetadata = strings.TrimSpace(objData)

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

type promptType string

const (
	PROMPT_AFFILIATION promptType = "affiliation"
	PROMPT_TITLE       promptType = "title"
	PROMPT_SENTIMENT   promptType = "sentiment"
)

func (bot *Bot) setPrompt(message *tgbotapi.Message, promptType promptType) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	prompt, _ := strings.CutPrefix(message.Text, parts[0])

	switch promptType {
	case PROMPT_TITLE:
		bot.conf.Ollama.Prompts.Title = prompt
	case PROMPT_AFFILIATION:
		bot.conf.Ollama.Prompts.Affiliation = prompt
	case PROMPT_SENTIMENT:
		bot.conf.Ollama.Prompts.Sentiment = prompt
	default:
		return
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) SetAffiliationPrompt(message *tgbotapi.Message) {
	bot.setPrompt(message, PROMPT_AFFILIATION)
}

func (bot *Bot) SettTitlePrompt(message *tgbotapi.Message) {
	bot.setPrompt(message, PROMPT_TITLE)
}

func (bot *Bot) SetSentimentPrompt(message *tgbotapi.Message) {
	bot.setPrompt(message, PROMPT_SENTIMENT)
}

func (bot *Bot) ListModels(message *tgbotapi.Message) {
	models, err := bot.model.ListModels()
	if err != nil {
		errorMsg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: "+err.Error(),
		)
		bot.api.Send(errorMsg)
		return
	}

	response := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"
	for _, model := range models {
		response += fmt.Sprintf("`%s` (%s, %s)\n",
			model.Name,
			model.Details.ParameterSize,
			model.Details.QuantizationLevel,
		)
	}
	response += fmt.Sprintf("\n–¢–µ–∫—É—â–∞—è:\n `%s`\n", bot.model.ModelName)

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		response,
	)
	msg.ParseMode = "Markdown"
	bot.api.Send(msg)
}

func (bot *Bot) SetModel(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	newModel, _ := strings.CutPrefix(message.Text, parts[0])
	newModel = strings.TrimSpace(newModel)

	availableModels, err := bot.model.ListModels()
	if err != nil {
		errorMsg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: "+err.Error(),
		)
		bot.api.Send(errorMsg)
		return
	}

	for _, availableModel := range availableModels {
		if availableModel.Name == newModel {
			bot.model.ModelName = newModel
			bot.conf.Ollama.GeneralModel = newModel

			msg := tgbotapi.NewMessage(
				message.Chat.ID,
				fmt.Sprintf("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ \"%s\"", bot.model.ModelName),
			)
			bot.api.Send(msg)

			bot.conf.Update()
			return
		}
	}

	errorMsg := tgbotapi.NewMessage(
		message.Chat.ID,
		fmt.Sprintf("–¢–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ \"%s\"", bot.model.ModelName),
	)
	bot.api.Send(errorMsg)
}

func (bot *Bot) ToggleSaveSimilar(message *tgbotapi.Message) {
	if bot.conf.Analysis.SaveSimilarArticles {
		bot.conf.Analysis.SaveSimilarArticles = false
		bot.api.Send(
			tgbotapi.NewMessage(message.Chat.ID, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ."),
		)
	} else {
		bot.conf.Analysis.SaveSimilarArticles = true
		bot.api.Send(
			tgbotapi.NewMessage(message.Chat.ID, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–æ."),
		)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) ChangeVectorSimilarityThreshold(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	newThreshold, err := strconv.ParseFloat(parts[1], 64)
	if err != nil || newThreshold < 0 || newThreshold > 1.0 {
		bot.sendError(message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0", message.MessageID)
		return
	}

	// Get and update user config
	userConfig, err := bot.conf.GetDB().GetUserConfig(message.From.ID)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	userConfig.VectorSimilarityThreshold = newThreshold
	if err := bot.conf.GetDB().SaveUserConfig(userConfig); err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	bot.sendSuccess(message.Chat.ID, "–ü–æ—Ä–æ–≥ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!", message.MessageID)
}

func (bot *Bot) ChangeDaysLookback(message *tgbotapi.Message) {
	userConfig, err := bot.conf.GetDB().GetUserConfig(message.From.ID)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω–µ–π.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	newDaysLookback, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	if newDaysLookback <= 0 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω–µ–π > 0",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	userConfig.DaysLookback = uint(newDaysLookback)
	if err := bot.conf.GetDB().SaveUserConfig(userConfig); err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) ChangeFinalSimilarityThreshold(message *tgbotapi.Message) {
	userConfig, err := bot.conf.GetDB().GetUserConfig(message.From.ID)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	newSimilarityThreshold, err := strconv.ParseFloat(parts[1], 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	if newSimilarityThreshold < 0 || newSimilarityThreshold > 1.0 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 0.0 < –∑–Ω–∞—á–µ–Ω–∏–µ < 1.0",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	userConfig.FinalSimilarityThreshold = newSimilarityThreshold
	if err := bot.conf.GetDB().SaveUserConfig(userConfig); err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) ChangeCompositeWeights(message *tgbotapi.Message) {
	userConfig, err := bot.conf.GetDB().GetUserConfig(message.From.ID)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	newConpositeSimilarity, err := strconv.ParseFloat(parts[1], 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	if newConpositeSimilarity < 0 || newConpositeSimilarity > 1.0 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 0.0 < –∑–Ω–∞—á–µ–Ω–∏–µ < 1.0",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	userConfig.CompositeVectorWeight = newConpositeSimilarity
	if err := bot.conf.GetDB().SaveUserConfig(userConfig); err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) ForgetArticles(message *tgbotapi.Message) {
	err := bot.conf.GetDB().DeleteAllArticles()
	if err != nil {
		bot.sendError(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å–∏", message.MessageID)
		return
	}

	bot.sendSuccess(message.Chat.ID, "–í—Å–µ —Å—Ç–∞—Ç—å–∏ —É—Å–ø–µ—à–Ω–æ \"–∑–∞–±—ã—Ç—ã\"", message.MessageID)
}

func (bot *Bot) GenerateSpreadsheet(message *tgbotapi.Message) {
	articles, err := bot.conf.GetDB().GetAllArticles()
	if err != nil {
		log.Printf("–ù–µ –≤—ã—à–ª–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %s", err)
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π", message.MessageID)
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –≤ –ø–∞–º—è—Ç–∏
	fileBuffer, err := spreadsheet.GenerateFromDatabase(articles)
	if err != nil {
		log.Printf("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å XLSX —Ñ–∞–π–ª: %s", err)
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: "+err.Error(), message.MessageID)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
	fileName := "ACASbot_Results.xlsx"
	realFile, err := os.Create(fileName)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error(), message.MessageID)
	} else {
		defer realFile.Close()
		realFile.Write(fileBuffer.Bytes())
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
	file := tgbotapi.FileBytes{
		Name:  fileName,
		Bytes: fileBuffer.Bytes(),
	}

	msg := tgbotapi.NewDocument(message.Chat.ID, file)
	msg.Caption = "üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
	msg.ReplyToMessageID = message.MessageID

	_, err = bot.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: %v", err)
		bot.sendError(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: "+err.Error(), message.MessageID)
	}
}

func (bot *Bot) SaveLocalSpreadsheet() error {
	articles, err := bot.conf.GetDB().GetAllArticles()
	if err != nil {
		return err
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –≤ –ø–∞–º—è—Ç–∏
	fileBuffer, err := spreadsheet.GenerateFromDatabase(articles)
	if err != nil {
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
	file, err := os.Create("ACASbot_Results.xlsx")
	if err != nil {
		return err
	}
	defer file.Close()
	file.Write(fileBuffer.Bytes())

	return nil
}

func (bot *Bot) FindSimilar(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ URL")
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}
	url := parts[1]
	if !strings.HasPrefix(url, "http") {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http/https")
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
	processingMsg := tgbotapi.NewMessage(message.Chat.ID, "üîç –ò—â—É –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏...")
	processingMsg.ReplyToMessageID = message.MessageID
	sentMsg, _ := bot.api.Send(processingMsg)
	defer func() {
		deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, sentMsg.MessageID)
		bot.api.Send(deleteMsg)
	}()

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏
	art, err := bot.getArticle(url)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏: "+err.Error())
		errorMsg.ReplyToMessageID = message.MessageID
		bot.api.Send(errorMsg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	userConfig, err := bot.conf.GetDB().GetUserConfig(message.From.ID)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", message.MessageID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
	if existing, err := bot.conf.GetDB().GetExactDuplicate(art.Content); err == nil && existing != nil {
		bot.notifyExactDuplicate(message, existing)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
	embedding, err := bot.model.GetEmbedding(art.Content)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", message.MessageID)
		return
	}

	// –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏
	similar, err := bot.conf.GetDB().FindSimilar(
		embedding,
		userConfig.VectorSimilarityThreshold,
		userConfig.DaysLookback,
	)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π", message.MessageID)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
	var duplicatesText string
	if len(similar) > 0 {
		composite := similarity.NewCompositeSimilarity(userConfig.CompositeVectorWeight)
		var verified []article.Article

		for _, candidate := range similar {
			score, err := composite.Compare(
				art.Content,
				candidate.Content,
				embedding,
				candidate.Embedding,
			)
			if err == nil && score >= userConfig.FinalSimilarityThreshold {
				candidate.TrueSimilarity = score
				verified = append(verified, candidate)
			}
		}

		duplicatesText = bot.generateDuplicatesMessage(verified, *art)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if duplicatesText != "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, duplicatesText)
		msg.ParseMode = "Markdown"
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ü–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
	}
}
func parseExcelDate(cellValue string) (time.Time, error) {
	// –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	cellValue = strings.TrimSpace(cellValue)

	// 1. –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ Excel serial number
	if serial, err := strconv.Atoi(cellValue); err == nil {
		// Excel date epoch is 1899-12-30 (note: not 31)
		baseDate := time.Date(1899, 12, 30, 0, 0, 0, 0, time.UTC)
		return baseDate.AddDate(0, 0, serial), nil
	}

	// 2. –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–º –≥–æ–¥–æ–º
	formats := []string{
		"02.01.2006", // dd.mm.yyyy
		"02/01/2006", // dd/mm/yyyy
		"2006-01-02", // yyyy-mm-dd
		"01-02-2006", // mm-dd-yyyy (US format)
		"01.02.2006", // mm.dd.yyyy
		"02-01-2006", // dd-mm-yyyy
	}

	for _, format := range formats {
		if t, err := time.Parse(format, cellValue); err == nil {
			return t, nil
		}
	}

	// 3. –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã–º –≥–æ–¥–æ–º (–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥)
	twoDigitYearFormats := []string{
		"02.01.06", // dd.mm.yy
		"02/01/06", // dd/mm/yy
		"01-02-06", // mm-dd-yy
		"01.02.06", // mm.dd.yy
		"02-01-06", // dd-mm-yy
	}

	for _, format := range twoDigitYearFormats {
		if t, err := time.Parse(format, cellValue); err == nil {
			// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 00-79 -> 2000-2079, 80-99 -> 1980-1999)
			year := t.Year()
			if year >= 100 { // –ï—Å–ª–∏ year —É–∂–µ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞—Ö)
				return t, nil
			}
			if year >= 80 {
				t = t.AddDate(1900, 0, 0)
			} else {
				t = t.AddDate(2000, 0, 0)
			}
			return t, nil
		}
	}

	// 4. –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–∏–ø–∞ "07-23-25"
	if parts := strings.Split(cellValue, "-"); len(parts) == 3 && len(parts[2]) == 2 {
		monthStr := parts[0]
		dayStr := parts[1]
		yearStr := parts[2]

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã–π –≥–æ–¥
		year, err := strconv.Atoi(yearStr)
		if err != nil {
			return time.Time{}, fmt.Errorf("invalid year: %s", yearStr)
		}

		// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥ (00-79 -> 2000-2079, 80-99 -> 1980-1999)
		if year >= 80 {
			year += 1900
		} else {
			year += 2000
		}

		// –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –ø–∞—Ä—Å–∏–º
		fullDate := fmt.Sprintf("%s-%s-%04d", monthStr, dayStr, year)
		return time.Parse("01-02-2006", fullDate)
	}

	return time.Time{}, fmt.Errorf("unrecognized date format: %s", cellValue)
}

func (bot *Bot) LoadXLSX(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	if message.Document == nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ XLSX —Ñ–∞–π–ª –∫ –∫–æ–º–∞–Ω–¥–µ")
		bot.api.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	if !strings.HasSuffix(message.Document.FileName, ".xlsx") {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .xlsx")
		bot.api.Send(msg)
		return
	}

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	fileURL, err := bot.api.GetFileDirectURL(message.Document.FileID)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞", message.MessageID)
		return
	}

	// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
	processingMsg := tgbotapi.NewMessage(message.Chat.ID, "üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
	sentMsg, _ := bot.api.Send(processingMsg)

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	tmpFile, err := os.CreateTemp("", "acasbot-*.xlsx")
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", message.MessageID)
		return
	}
	defer os.Remove(tmpFile.Name())
	defer tmpFile.Close()

	// –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	resp, err := http.Get(fileURL)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %s", err)
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞", message.MessageID)
		return
	}
	defer resp.Body.Close()

	if _, err := io.Copy(tmpFile, resp.Body); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %s", err)
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞", message.MessageID)
		return
	}

	// –ü–∞—Ä—Å–∏–º XLSX
	xlFile, err := xlsx.OpenFile(tmpFile.Name())
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %s", err)
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è XLSX —Ñ–∞–π–ª–∞", message.MessageID)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	successCount := 0
	skipCount := 0
	db := bot.conf.GetDB()

	for _, sheet := range xlFile.Sheets {
		for i, row := range sheet.Rows {
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
			if i == 0 || len(row.Cells) == 0 {
				continue
			}

			// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
			cells := row.Cells
			if len(cells) < 6 {
				continue
			}

			title := strings.TrimSpace(cells[2].String())
			sourceURL := strings.TrimSpace(cells[3].String())
			if title == "" || sourceURL == "" {
				skipCount++
				continue
			}

			// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
			pubDate, err := parseExcelDate(cells[0].String())
			if err != nil {
				log.Printf("Failed to parse date: %s", err)
				pubDate = time.Now()
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
			art := &article.Article{
				PublishedAt: pubDate.Unix(),
				Affiliation: cells[4].String(),
				Sentiment:   cells[5].String(),
				Title:       cells[2].String(),
				SourceURL:   cells[3].String(),
				CreatedAt:   time.Now().Unix(),
				SimilarURLs: []string{},
				Embedding:   []float64{},
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ URL
			exists, err := db.HasArticleByURL(art.SourceURL)
			if err != nil || exists {
				skipCount++
				continue
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
			if err := db.SaveArticle(art); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É: %v", err)
				skipCount++
			} else {
				successCount++
			}
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
	report := fmt.Sprintf(
		"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: %d —Å—Ç–∞—Ç–µ–π\nüö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã/–æ—à–∏–±–∫–∏): %d",
		successCount, skipCount,
	)
	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Å—Ç–∞—Ç–µ–π", successCount)

	// –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
	deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, sentMsg.MessageID)
	bot.api.Send(deleteMsg)

	msg := tgbotapi.NewMessage(message.Chat.ID, report)
	bot.api.Send(msg)
}

func (bot *Bot) SendLogs(message *tgbotapi.Message) {
	// Check if log file exists
	if _, err := os.Stat(bot.conf.LogsFile); os.IsNotExist(err) {
		bot.sendError(message.Chat.ID, "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", message.MessageID)
		return
	}

	// Read log file
	logFile, err := os.Open(bot.conf.LogsFile)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤", message.MessageID)
		log.Printf("Error opening log file: %v", err)
		return
	}
	defer logFile.Close()

	// Get file stats
	fileInfo, err := logFile.Stat()
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ", message.MessageID)
		log.Printf("Error getting file stats: %v", err)
		return
	}

	if fileInfo.Size() > 50*1024*1024 {
		bot.sendError(message.Chat.ID, "–§–∞–π–ª –ª–æ–≥–æ–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)", message.MessageID)
		return
	}

	// Read file content
	fileBytes, err := io.ReadAll(logFile)
	if err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞", message.MessageID)
		log.Printf("Error reading log file: %v", err)
		return
	}

	// Create message with log file
	file := tgbotapi.FileBytes{
		Name:  "ACASbot_logs.txt",
		Bytes: fileBytes,
	}

	msg := tgbotapi.NewDocument(message.Chat.ID, file)
	msg.Caption = "üìã –õ–æ–≥–∏ –±–æ—Ç–∞"
	msg.ReplyToMessageID = message.MessageID

	// Send the file
	if _, err := bot.api.Send(msg); err != nil {
		bot.sendError(message.Chat.ID, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞", message.MessageID)
		log.Printf("Error sending log file: %v", err)
	}
}
