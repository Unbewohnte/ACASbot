package bot

import (
	"Unbewohnte/ACASbot/spreadsheet"
	"fmt"
	"log"
	"net/url"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Command struct {
	Name        string
	Description string
	Example     string
	Call        func(*tgbotapi.Message)
}

func (bot *Bot) NewCommand(cmd Command) {
	bot.commands = append(bot.commands, cmd)
}

func (bot *Bot) CommandByName(name string) *Command {
	for _, command := range bot.commands {
		if command.Name == name {
			return &command
		}
	}

	return nil
}

func (bot *Bot) Help(message *tgbotapi.Message) {
	var helpMessage string

	for _, command := range bot.commands {
		helpMessage += fmt.Sprintf("\n*–ö–æ–º–∞–Ω–¥–∞:* \"%s\"\n*–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n", command.Name, command.Description)
		if command.Example != "" {
			helpMessage += fmt.Sprintf("*–ü—Ä–∏–º–µ—Ä:* `%s`\n", command.Example)
		}
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		helpMessage,
	)
	msg.ParseMode = "Markdown"
	bot.api.Send(msg)
}

func (bot *Bot) ChangeOrg(message *tgbotapi.Message) {
	parts := strings.Split(strings.TrimSpace(message.Text), " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ò–º—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	bot.conf.OrganizationName = strings.Join(parts[1:], " ")
	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		fmt.Sprintf("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ \"%s\"", bot.conf.OrganizationName),
	)

	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) formatAnalysisResult(result *ArticleAnalysis) string {
	var response strings.Builder

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	if result.Content.Success && result.Content.Title != "" {
		response.WriteString(fmt.Sprintf("*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n\n", result.Content.Title))
	} else if result.TitleFromModel != "" {
		response.WriteString(fmt.Sprintf("*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n\n", result.TitleFromModel))
	}

	// –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
	if result.Content.PubDate != nil {
		response.WriteString(fmt.Sprintf("*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* %s\n\n", result.Content.PubDate))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if bot.conf.FullAnalysis && result.Affiliation != "" {
		response.WriteString(fmt.Sprintf("*–°–≤—è–∑—å —Å \"%s\":* %s\n\n", bot.conf.OrganizationName, result.Affiliation))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ
	if result.Sentiment != "" {
		response.WriteString(fmt.Sprintf("*–û—Ç–Ω–æ—à–µ–Ω–∏–µ:* %s\n", result.Sentiment))
		if result.Justification != "" {
			response.WriteString(fmt.Sprintf("*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:* %s\n", result.Justification))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if len(result.Errors) > 0 {
		response.WriteString("\n‚ö†Ô∏è *–û—à–∏–±–∫–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:*\n")
		for _, err := range result.Errors {
			response.WriteString(fmt.Sprintf("- %s\n", err.Error()))
		}
	}

	return response.String()
}

func (bot *Bot) Do(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ URL")
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	url := parts[1]
	if !strings.HasPrefix(url, "http") {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http/https")
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
	result, err := bot.analyzeArticle(url)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "+err.Error())
		errorMsg.ReplyToMessageID = message.MessageID
		bot.api.Send(errorMsg)
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	responseText := bot.formatAnalysisResult(result)
	msg := tgbotapi.NewMessage(message.Chat.ID, "üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞*\n\n"+responseText)
	msg.ParseMode = "Markdown"
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
	if bot.conf.PushToGoogleSheet {
		if result.Content.PubDate == nil {
			now := time.Now()
			result.Content.PubDate = &now
		}

		summary := result.Content.Title
		if summary == "" {
			summary = result.TitleFromModel
		}

		entry := &spreadsheet.SheetEntry{
			PublicationDate: *result.Content.PubDate,
			Source:          extractDomain(url),
			Summary:         summary,
			URL:             url,
			Note:            result.Affiliation,
			SentimentType:   result.Sentiment,
		}

		if err := bot.sheet.AddAnalysisResultWithRetry(entry, 3); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Sheet: %v", err)
			msg := tgbotapi.NewMessage(
				message.Chat.ID,
				"–û—à–∏–±–∫–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É: "+err.Error(),
			)
			bot.api.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(
				message.Chat.ID,
				"–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É!",
			)
			bot.api.Send(msg)
		}
	}
}

func extractDomain(urlStr string) string {
	u, err := url.Parse(urlStr)
	if err != nil {
		return urlStr
	}
	return u.Host
}

func (bot *Bot) ToggleAnalysis(message *tgbotapi.Message) {
	if bot.conf.FullAnalysis {
		bot.conf.FullAnalysis = false
		bot.api.Send(tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–∫–ª—é—á–µ–Ω"))
	} else {
		bot.conf.FullAnalysis = true
		bot.api.Send(tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω"))
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) About(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		`ACAS bot (Article Context And Sentiment bot).

–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–µ–π –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏/–ª–∏—á–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ Google —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.

Source: https://github.com/Unbewohnte/ACASbot
–õ–∏—Ü–µ–Ω–∑–∏—è: GPLv3
`,
	)

	bot.api.Send(msg)
}

func (bot *Bot) AddUser(message *tgbotapi.Message) {
	parts := strings.Split(strings.TrimSpace(message.Text), " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	id, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	for _, allowedID := range bot.conf.Telegram.AllowedUserIDs {
		if id == allowedID {
			msg := tgbotapi.NewMessage(
				message.Chat.ID,
				"–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.",
			)
			msg.ReplyToMessageID = message.MessageID
			bot.api.Send(msg)
			return
		}
	}

	bot.conf.Telegram.AllowedUserIDs = append(bot.conf.Telegram.AllowedUserIDs, id)

	// –°–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ñ–∞–π–ª
	bot.conf.Update()

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) TogglePublicity(message *tgbotapi.Message) {
	if bot.conf.Telegram.Public {
		bot.conf.Telegram.Public = false
		bot.api.Send(
			tgbotapi.NewMessage(message.Chat.ID, "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö."),
		)
	} else {
		bot.conf.Telegram.Public = true
		bot.api.Send(
			tgbotapi.NewMessage(message.Chat.ID, "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ç–µ–ø–µ—Ä—å —É –≤—Å–µ—Ö."),
		)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) RemoveUser(message *tgbotapi.Message) {
	parts := strings.Split(strings.TrimSpace(message.Text), " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	id, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	tmp := bot.conf.Telegram.AllowedUserIDs
	bot.conf.Telegram.AllowedUserIDs = []int64{}
	for _, allowedID := range tmp {
		if allowedID == id {
			continue
		}

		bot.conf.Telegram.AllowedUserIDs = append(bot.conf.Telegram.AllowedUserIDs, allowedID)
	}

	// –°–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ñ–∞–π–ª
	bot.conf.Update()

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) ChangeMaxContentSize(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	newMaxContentSize, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	if newMaxContentSize <= 0 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ > 0",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	bot.conf.MaxContentSize = uint(newMaxContentSize)

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) PrintConfig(message *tgbotapi.Message) {
	var response string = ""

	response += "*–ù—ã–Ω–µ—à–Ω—è—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è*: \n"
	response += fmt.Sprintf("*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏*: `%v`\n", bot.conf.OrganizationName)
	response += fmt.Sprintf("*–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏*: `%v`\n", bot.conf.OrganizationMetadata)
	response += fmt.Sprintf("*–ü—Ä–æ–º–ø—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞*: `%v`\n", bot.conf.Ollama.Prompts.Title)
	response += fmt.Sprintf("*–ü—Ä–æ–º–ø—Ç —Å–≤—è–∑–∏ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π*: `%v`\n", bot.conf.Ollama.Prompts.Affiliation)
	response += fmt.Sprintf("*–ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏*: `%v`\n", bot.conf.Ollama.Prompts.SentimentLong)
	response += fmt.Sprintf("*–ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏*: `%v`\n", bot.conf.Ollama.Prompts.SentimentShort)
	response += fmt.Sprintf("*–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑?*: `%v`\n", bot.conf.FullAnalysis)
	response += fmt.Sprintf("*–õ–∏–º–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*: `%v`\n", bot.conf.MaxContentSize)
	response += fmt.Sprintf("*LLM*: `%v`\n", bot.conf.Ollama.Model)
	response += fmt.Sprintf("*–í—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ –æ—Ç–≤–µ—Ç LLM –≤ —Å–µ–∫—É–Ω–¥–∞—Ö*: `%v`\n", bot.conf.Ollama.QueryTimeoutSeconds)
	response += fmt.Sprintf("*–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Google —Ç–∞–±–ª–∏—Ü—É?*: `%v`\n", bot.conf.PushToGoogleSheet)
	response += fmt.Sprintf("*ID Google —Ç–∞–±–ª–∏—Ü—ã*: `%v`\n", bot.conf.Sheets.Config.SpreadsheetID)
	response += fmt.Sprintf("*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã*: `%v`\n", bot.conf.Sheets.Config.SheetName)
	response += fmt.Sprintf("*–û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π?*: `%v`\n", bot.conf.Telegram.Public)
	response += fmt.Sprintf("*–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: `%+v`\n", bot.conf.Telegram.AllowedUserIDs)

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		response,
	)
	msg.ParseMode = "Markdown"
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) ChangeSpreadhseetID(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	bot.conf.Sheets.Config.SpreadsheetID = parts[1]
	if bot.sheet != nil {
		bot.sheet.SpreadsheetID = bot.conf.Sheets.Config.SpreadsheetID
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) ChangeSheetName(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	newName, _ := strings.CutPrefix(message.Text, parts[0])
	bot.conf.Sheets.Config.SheetName = strings.TrimSpace(newName)
	if bot.sheet != nil {
		bot.sheet.SheetName = bot.conf.Sheets.Config.SheetName
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) ChangeQueryTimeout(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	timeoutSeconds, err := strconv.ParseUint(parts[1], 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	bot.conf.Ollama.QueryTimeoutSeconds = uint(timeoutSeconds)
	bot.model.TimeoutSeconds = bot.conf.Ollama.QueryTimeoutSeconds

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–í—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

func (bot *Bot) GeneralQuery(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	query := strings.Join(parts[1:], " ")
	answer, err := bot.model.Query(query)
	if err != nil {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		answer,
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)
}

func (bot *Bot) SetOrganizationData(message *tgbotapi.Message) {
	parts := strings.Split(message.Text, " ")
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(
			message.Chat.ID,
			"–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.",
		)
		msg.ReplyToMessageID = message.MessageID
		bot.api.Send(msg)
		return
	}

	orgData, _ := strings.CutPrefix(message.Text, parts[0])

	bot.conf.OrganizationMetadata = strings.TrimSpace(orgData)

	msg := tgbotapi.NewMessage(
		message.Chat.ID,
		"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
	)
	msg.ReplyToMessageID = message.MessageID
	bot.api.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	bot.conf.Update()
}

// func (bot *Bot) SetAffiliationPrompt(message *tgbotapi.Message) {
// 	parts := strings.Split(message.Text, " ")
// 	if len(parts) < 2 {
// 		msg := tgbotapi.NewMessage(
// 			message.Chat.ID,
// 			"–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.",
// 		)
// 		msg.ReplyToMessageID = message.MessageID
// 		bot.api.Send(msg)
// 		return
// 	}

// 	prompt, _ := strings.CutPrefix(message.Text, parts[0])

// 	bot.conf.OrganizationMetadata = strings.TrimSpace(orgData)

// 	msg := tgbotapi.NewMessage(
// 		message.Chat.ID,
// 		"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
// 	)
// 	msg.ReplyToMessageID = message.MessageID
// 	bot.api.Send(msg)

// 	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
// 	bot.conf.Update()
// }
